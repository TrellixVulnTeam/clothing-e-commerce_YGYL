{"ast":null,"code":"//first argument is the existem items, and second argument is the new item to be added\nexport const addItemToCart = (cartItems, cartItemToAdd) => {\n  //set existingCartItem to true if the item already exist in the cart\n  const existingCartItem = cartItems.find( //first item found in an array based in a condition...\n  cartItem => cartItem.id === cartItemToAdd.id); //if does't find it will be undefined\n\n  if (existingCartItem) {\n    //if the item already exist in the cart\n    //return a new array with quantity of that item +1 in order to re-render the component\n    return cartItems.map((cartItem //goes true the whole array\n    ) => cartItem.id === cartItemToAdd.id //item in the cart that matches with the item to be added\n    ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } //create new array with the old items in the list and increase quantity of the repeated one\n    : cartItem); //otherwise just return the cartItem array as before\n  } //each new item added will start counting by 1 as default. If it repeat just increast +1 for each repeated item\n\n\n  return [...cartItems, { ...cartItemToAdd,\n    quantity: 1\n  }];\n};\nexport const removeItemFromCart = (cartItems, cartItemToRemove) => {\n  //check if the item exist in the cart\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id); //if the quantity of the item to be removed is 1, remove the item object from the cart\n\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id);\n  } //as a default, just decrease the quantity of the item\n\n\n  return cartItems.map(cartItem => cartItem.id === cartItemToRemove.id //if find the item, \n  ? { ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : cartItem);\n};","map":{"version":3,"sources":["/Users/patry/react_projects/clothing-e-commerce/clothing-e-commerce/src/redux/cart/cart.utils.js"],"names":["addItemToCart","cartItems","cartItemToAdd","existingCartItem","find","cartItem","id","map","quantity","removeItemFromCart","cartItemToRemove","filter"],"mappings":"AAAA;AACA,OAAO,MAAMA,aAAa,GAAG,CAACC,SAAD,EAAYC,aAAZ,KAA8B;AACzD;AACA,QAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAV,EACvB;AACCC,EAAAA,QAAD,IAAcA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EAFrB,CAAzB,CAFyD,CAKtD;;AAEH,MAAIH,gBAAJ,EAAsB;AACpB;AACA;AACA,WAAOF,SAAS,CAACM,GAAV,CACL,CACEF,QADF,CACW;AADX,SAGEA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EAA9B,CAAiC;AAAjC,MACI,EAAE,GAAGD,QAAL;AAAeG,MAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAA7C,KADJ,CACqD;AADrD,MAEIH,QAND,CAAP,CAHoB,CAUjB;AACJ,GAlBwD,CAoBzD;;;AACA,SAAO,CAAC,GAAGJ,SAAJ,EAAe,EAAE,GAAGC,aAAL;AAAoBM,IAAAA,QAAQ,EAAE;AAA9B,GAAf,CAAP;AACD,CAtBM;AAwBP,OAAO,MAAMC,kBAAkB,GAAG,CAACR,SAAD,EAAYS,gBAAZ,KAAiC;AACjE;AACA,QAAMP,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CACtBC,QAAD,IAAcA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EADxB,CAAzB,CAFiE,CAMjE;;AACA,MAAIH,gBAAgB,CAACK,QAAjB,KAA8B,CAAlC,EAAqC;AACnC,WAAOP,SAAS,CAACU,MAAV,CAAkBN,QAAD,IAAcA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAAhE,CAAP;AACD,GATgE,CAWjE;;;AACA,SAAOL,SAAS,CAACM,GAAV,CAAeF,QAAD,IACnBA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAAjC,CAAoC;AAApC,IACI,EAAE,GAAGD,QAAL;AAAeG,IAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAA7C,GADJ,GAEIH,QAHC,CAAP;AAKD,CAjBM","sourcesContent":["//first argument is the existem items, and second argument is the new item to be added\nexport const addItemToCart = (cartItems, cartItemToAdd) => {\n  //set existingCartItem to true if the item already exist in the cart\n  const existingCartItem = cartItems.find(\n    //first item found in an array based in a condition...\n    (cartItem) => cartItem.id === cartItemToAdd.id\n  ); //if does't find it will be undefined\n\n  if (existingCartItem) {\n    //if the item already exist in the cart\n    //return a new array with quantity of that item +1 in order to re-render the component\n    return cartItems.map(\n      (\n        cartItem //goes true the whole array\n      ) =>\n        cartItem.id === cartItemToAdd.id //item in the cart that matches with the item to be added\n          ? { ...cartItem, quantity: cartItem.quantity + 1 } //create new array with the old items in the list and increase quantity of the repeated one\n          : cartItem\n    ); //otherwise just return the cartItem array as before\n  }\n\n  //each new item added will start counting by 1 as default. If it repeat just increast +1 for each repeated item\n  return [...cartItems, { ...cartItemToAdd, quantity: 1 }];\n};\n\nexport const removeItemFromCart = (cartItems, cartItemToRemove) => {\n  //check if the item exist in the cart\n  const existingCartItem = cartItems.find(\n    (cartItem) => cartItem.id === cartItemToRemove.id\n  );\n\n  //if the quantity of the item to be removed is 1, remove the item object from the cart\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter((cartItem) => cartItem.id !== cartItemToRemove.id);\n  }\n\n  //as a default, just decrease the quantity of the item\n  return cartItems.map((cartItem) =>\n    cartItem.id === cartItemToRemove.id //if find the item, \n      ? { ...cartItem, quantity: cartItem.quantity - 1 }\n      : cartItem\n  );\n};\n"]},"metadata":{},"sourceType":"module"}