{"ast":null,"code":"/*This is a Memoization technic to avoid that components that are making use of the \"selectCart\" \nare re-rendered every time the state changes. Basically it sees that the state for the cart didn't change so it\ndoesn't need to re-render */\nimport { createSelector } from \"reselect\"; //it gets the whole state and returns only the cart object\n\nconst selectCart = state => state.cart; //gets the the cartItems from the cart\n\n\nexport const selectCartItems = createSelector([selectCart], //collection of input selector\ncart => cart.cartItems //function that returns the value we want from the selector in the order it was written\n);\nexport const selectCartItemsCount = createSelector([selectCartItems], cartItems => cartItems.reduce( //sum the quantity of each item in the cart array, starting by 0\n(accumulatedQuantity, cartItem) => accumulatedQuantity + cartItem.quantity, 0));","map":{"version":3,"sources":["/Users/patry/react_projects/clothing-e-commerce/clothing-e-commerce/src/redux/cart/cart.selectors.js"],"names":["createSelector","selectCart","state","cart","selectCartItems","cartItems","selectCartItemsCount","reduce","accumulatedQuantity","cartItem","quantity"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,cAAT,QAA+B,UAA/B,C,CAEA;;AACA,MAAMC,UAAU,GAAIC,KAAD,IAAWA,KAAK,CAACC,IAApC,C,CAEA;;;AACA,OAAO,MAAMC,eAAe,GAAGJ,cAAc,CAC3C,CAACC,UAAD,CAD2C,EAC7B;AACbE,IAAD,IAAUA,IAAI,CAACE,SAF4B,CAElB;AAFkB,CAAtC;AAKP,OAAO,MAAMC,oBAAoB,GAAGN,cAAc,CAChD,CAACI,eAAD,CADgD,EAE/CC,SAAD,IACEA,SAAS,CAACE,MAAV,EACE;AACA,CAACC,mBAAD,EAAsBC,QAAtB,KACED,mBAAmB,GAAGC,QAAQ,CAACC,QAHnC,EAIE,CAJF,CAH8C,CAA3C","sourcesContent":["/*This is a Memoization technic to avoid that components that are making use of the \"selectCart\" \nare re-rendered every time the state changes. Basically it sees that the state for the cart didn't change so it\ndoesn't need to re-render */\nimport { createSelector } from \"reselect\";\n\n//it gets the whole state and returns only the cart object\nconst selectCart = (state) => state.cart;\n\n//gets the the cartItems from the cart\nexport const selectCartItems = createSelector(\n  [selectCart], //collection of input selector\n  (cart) => cart.cartItems //function that returns the value we want from the selector in the order it was written\n);\n\nexport const selectCartItemsCount = createSelector(\n  [selectCartItems],\n  (cartItems) =>\n    cartItems.reduce(\n      //sum the quantity of each item in the cart array, starting by 0\n      (accumulatedQuantity, cartItem) =>\n        accumulatedQuantity + cartItem.quantity,\n      0\n    )\n);\n"]},"metadata":{},"sourceType":"module"}