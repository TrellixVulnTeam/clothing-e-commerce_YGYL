{"ast":null,"code":"var _jsxFileName = \"/Users/patry/react_projects/clothing-e-commerce/clothing-e-commerce/src/App.js\";\nimport React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport \"./App.css\";\nimport HomePage from \"./pages/homepage/homepage.component\";\nimport ShopPage from \"./pages/shop/shop.component\";\nimport Header from \"./components/header/header.component\";\nimport SignInAndSignUpPage from \"./pages/sign-in-and-sign-up/sign-in-and-sign-up.component\";\nimport { auth, createUserProfileDocument } from \"./firebase/firebase.utils\";\nimport { setCurrentUser } from \"./redux/user/user.actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromAuth = null;\n  }\n\n  //when a user log in, the state will change to the name of the user\n  componentDidMount() {\n    const {\n      setCurrentUser\n    } = this.props;\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      if (userAuth) {\n        //if the authorization is successful\n        //get the reference from the createUser method\n        const userRef = createUserProfileDocument(userAuth); //if the user is not registered, create a new userRef doc\n        //collecting the data from database to the application, by setting state to the user properties\n\n        (await userRef).onSnapshot(snapShot => {\n          setCurrentUser({\n            id: snapShot.id,\n            ...snapShot.data()\n          });\n        });\n      } else {\n        //set state of the current user to null again\n        setCurrentUser(userAuth);\n      }\n    });\n  } //closes the subscription \"logout\" by setting state of authentication to null\n\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      //exact is an argument true or false that uses the path. True the path must be exacly\n      //the same as written in the \"path\" in order to render the component\n      //Switch allows when the path in Route matches, it only render the component in that route\n      //Swtich helps to render only what we want\n      //by placing the Header outside the Switch, it will always be displayed and rendered\n      _jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/\",\n            component: HomePage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: false,\n            path: \"/shop\",\n            component: ShopPage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/signin\",\n            component: SignInAndSignUpPage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n});\n\nexport default connect(null, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/patry/react_projects/clothing-e-commerce/clothing-e-commerce/src/App.js"],"names":["React","Switch","Route","connect","HomePage","ShopPage","Header","SignInAndSignUpPage","auth","createUserProfileDocument","setCurrentUser","App","Component","unsubscribeFromAuth","componentDidMount","props","onAuthStateChanged","userAuth","userRef","onSnapshot","snapShot","id","data","componentWillUnmount","render","mapDispatchToProps","dispatch","user"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,kBAA9B;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAO,WAAP;AAEA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,OAAOC,mBAAP,MAAgC,2DAAhC;AACA,SAASC,IAAT,EAAeC,yBAAf,QAAgD,2BAAhD;AACA,SAASC,cAAT,QAA+B,2BAA/B;;;AAEA,MAAMC,GAAN,SAAkBX,KAAK,CAACY,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAEhCC,mBAFgC,GAEV,IAFU;AAAA;;AAIhC;AACAC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEJ,MAAAA;AAAF,QAAqB,KAAKK,KAAhC;AAEA,SAAKF,mBAAL,GAA2BL,IAAI,CAACQ,kBAAL,CAAwB,MAAOC,QAAP,IAAoB;AACrE,UAAIA,QAAJ,EAAc;AACZ;AACA;AACA,cAAMC,OAAO,GAAGT,yBAAyB,CAACQ,QAAD,CAAzC,CAHY,CAGyC;AAErD;;AACA,SAAC,MAAMC,OAAP,EAAgBC,UAAhB,CAA4BC,QAAD,IAAc;AACvCV,UAAAA,cAAc,CAAC;AACbW,YAAAA,EAAE,EAAED,QAAQ,CAACC,EADA;AAEb,eAAGD,QAAQ,CAACE,IAAT;AAFU,WAAD,CAAd;AAID,SALD;AAMD,OAZD,MAYO;AACL;AACAZ,QAAAA,cAAc,CAACO,QAAD,CAAd;AACD;AACF,KAjB0B,CAA3B;AAkBD,GA1B+B,CA4BhC;;;AACAM,EAAAA,oBAAoB,GAAG;AACrB,SAAKV,mBAAL;AACD;;AAEDW,EAAAA,MAAM,GAAG;AACP;AAAA;AACE;AACA;AACA;AACA;AACA;AACA;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,gCACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBADF,eAGE,QAAC,MAAD;AAAA,kCACE,QAAC,KAAD;AAAO,YAAA,KAAK,MAAZ;AAAa,YAAA,IAAI,EAAC,GAAlB;AAAsB,YAAA,SAAS,EAAEpB;AAAjC;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,KAAD;AAAO,YAAA,KAAK,EAAE,KAAd;AAAqB,YAAA,IAAI,EAAC,OAA1B;AAAkC,YAAA,SAAS,EAAEC;AAA7C;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,SAAZ;AAAsB,YAAA,SAAS,EAAEE;AAAjC;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAgBD;;AAlD+B;;AAqDlC,MAAMkB,kBAAkB,GAAIC,QAAD,KAAe;AACxChB,EAAAA,cAAc,EAAGiB,IAAD,IAAUD,QAAQ,CAAChB,cAAc,CAACiB,IAAD,CAAf;AADM,CAAf,CAA3B;;AAIA,eAAexB,OAAO,CAAC,IAAD,EAAOsB,kBAAP,CAAP,CAAkCd,GAAlC,CAAf","sourcesContent":["import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport \"./App.css\";\n\nimport HomePage from \"./pages/homepage/homepage.component\";\nimport ShopPage from \"./pages/shop/shop.component\";\nimport Header from \"./components/header/header.component\";\nimport SignInAndSignUpPage from \"./pages/sign-in-and-sign-up/sign-in-and-sign-up.component\";\nimport { auth, createUserProfileDocument } from \"./firebase/firebase.utils\";\nimport { setCurrentUser } from \"./redux/user/user.actions\";\n\nclass App extends React.Component {\n  //use it to avoid memory leaks of authentication. Set authentication to null\n  unsubscribeFromAuth = null;\n\n  //when a user log in, the state will change to the name of the user\n  componentDidMount() {\n    const { setCurrentUser } = this.props;\n\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async (userAuth) => {\n      if (userAuth) {\n        //if the authorization is successful\n        //get the reference from the createUser method\n        const userRef = createUserProfileDocument(userAuth); //if the user is not registered, create a new userRef doc\n\n        //collecting the data from database to the application, by setting state to the user properties\n        (await userRef).onSnapshot((snapShot) => {\n          setCurrentUser({\n            id: snapShot.id,\n            ...snapShot.data(),\n          });\n        });\n      } else {\n        //set state of the current user to null again\n        setCurrentUser(userAuth);\n      }\n    });\n  }\n\n  //closes the subscription \"logout\" by setting state of authentication to null\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return (\n      //exact is an argument true or false that uses the path. True the path must be exacly\n      //the same as written in the \"path\" in order to render the component\n      //Switch allows when the path in Route matches, it only render the component in that route\n      //Swtich helps to render only what we want\n      //by placing the Header outside the Switch, it will always be displayed and rendered\n      <div className=\"App\">\n        <Header />\n        {/* pass in the current state of the user */}\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route exact={false} path=\"/shop\" component={ShopPage} />\n          <Route path=\"/signin\" component={SignInAndSignUpPage} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  setCurrentUser: (user) => dispatch(setCurrentUser(user)),\n});\n\nexport default connect(null, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}