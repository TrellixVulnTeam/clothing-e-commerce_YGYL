{"ast":null,"code":"import CartActionTypes from \"./cart.types\";\nimport { addItemToCart } from \"./cart.utils\"; //the cart dorpdown initial state should be hidden, and if something triggers it, then it should show up\n\nconst INITAL_STATE = {\n  hidden: true,\n  cartItems: []\n}; //the state of the dropdown starts with the initial_state\n//and based in an action it can change or just keep the way it was\n\nconst cartReducer = (state = INITAL_STATE, action) => {\n  switch (action.type) {\n    case CartActionTypes.TOGGLE_CART_HIDDEN:\n      //hidden or unhidden the cart on the top right edge of the screen\n      return { ...state,\n        //spread the state\n        hidden: !state.hidden //if its hidden then unhidden and vice versa\n\n      };\n\n    case CartActionTypes.ADD_ITEM:\n      //add new items to the cart\n      return { ...state,\n        //spread the state\n        cartItems: addItemToCart(state.cartItems, action.payload) //old state of the cartItem + the new object that is just being added\n\n      };\n\n    case CartActionTypes.REMOVE_ITEM:\n      return { ...state,\n        cartItems\n      };\n\n    case CartActionTypes.CLEAR_ITEM_FROM_CART:\n      return { ...state,\n        //using the current array of cartItems, it returns a new array with only the items that do not match with the id of the item to be removed\n        cartItems: state.cartItems.filter(cartItem => cartItem.id !== action.payload.id)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["/Users/patry/react_projects/clothing-e-commerce/clothing-e-commerce/src/redux/cart/cart.reducer.js"],"names":["CartActionTypes","addItemToCart","INITAL_STATE","hidden","cartItems","cartReducer","state","action","type","TOGGLE_CART_HIDDEN","ADD_ITEM","payload","REMOVE_ITEM","CLEAR_ITEM_FROM_CART","filter","cartItem","id"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,SAASC,aAAT,QAA8B,cAA9B,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,IADW;AAEnBC,EAAAA,SAAS,EAAE;AAFQ,CAArB,C,CAKA;AACA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,eAAe,CAACS,kBAArB;AAAyC;AACvC,aAAO,EACL,GAAGH,KADE;AACK;AACVH,QAAAA,MAAM,EAAE,CAACG,KAAK,CAACH,MAFV,CAEkB;;AAFlB,OAAP;;AAIF,SAAKH,eAAe,CAACU,QAArB;AAA+B;AAC7B,aAAO,EACL,GAAGJ,KADE;AACK;AACVF,QAAAA,SAAS,EAAEH,aAAa,CAACK,KAAK,CAACF,SAAP,EAAkBG,MAAM,CAACI,OAAzB,CAFnB,CAEsD;;AAFtD,OAAP;;AAIF,SAAKX,eAAe,CAACY,WAArB;AACE,aAAO,EACL,GAAGN,KADE;AAELF,QAAAA;AAFK,OAAP;;AAIF,SAAKJ,eAAe,CAACa,oBAArB;AACE,aAAO,EACL,GAAGP,KADE;AAEL;AACAF,QAAAA,SAAS,EAAEE,KAAK,CAACF,SAAN,CAAgBU,MAAhB,CACRC,QAAD,IAAcA,QAAQ,CAACC,EAAT,KAAgBT,MAAM,CAACI,OAAP,CAAeK,EADpC;AAHN,OAAP;;AAOF;AACE,aAAOV,KAAP;AAzBJ;AA2BD,CA5BD;;AA8BA,eAAeD,WAAf","sourcesContent":["import CartActionTypes from \"./cart.types\";\nimport { addItemToCart } from \"./cart.utils\";\n\n//the cart dorpdown initial state should be hidden, and if something triggers it, then it should show up\nconst INITAL_STATE = {\n  hidden: true,\n  cartItems: [],\n};\n\n//the state of the dropdown starts with the initial_state\n//and based in an action it can change or just keep the way it was\nconst cartReducer = (state = INITAL_STATE, action) => {\n  switch (action.type) {\n    case CartActionTypes.TOGGLE_CART_HIDDEN: //hidden or unhidden the cart on the top right edge of the screen\n      return {\n        ...state, //spread the state\n        hidden: !state.hidden, //if its hidden then unhidden and vice versa\n      };\n    case CartActionTypes.ADD_ITEM: //add new items to the cart\n      return {\n        ...state, //spread the state\n        cartItems: addItemToCart(state.cartItems, action.payload), //old state of the cartItem + the new object that is just being added\n      };\n    case CartActionTypes.REMOVE_ITEM:\n      return {\n        ...state,\n        cartItems\n      };\n    case CartActionTypes.CLEAR_ITEM_FROM_CART:\n      return {\n        ...state,\n        //using the current array of cartItems, it returns a new array with only the items that do not match with the id of the item to be removed\n        cartItems: state.cartItems.filter(\n          (cartItem) => cartItem.id !== action.payload.id\n        ),\n      };\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer;\n"]},"metadata":{},"sourceType":"module"}