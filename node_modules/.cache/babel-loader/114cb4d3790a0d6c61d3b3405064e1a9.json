{"ast":null,"code":"import { createSelector } from \"reselect\";\nimport memoize from \"lodash.memoize\"; //because the url parameter is a string and the id is a number, a map was created to match both\n\nconst COLLECTION_ID_MAP = {\n  hats: 1,\n  sneakers: 2,\n  jackets: 3,\n  womens: 4,\n  mens: 5\n};\n\nconst selectShop = state => state.shop;\n\nexport const selectCollections = createSelector([selectShop], shop => shop.collections); //find collection.id matching the url parameter from the collection_id_map\n\n/*By wrapping this function with memoize, we're saying that whenever this function \ngets called and receives collectionUrlParam, I want to memoize the return of this \nfunction (in this case we return a selector). If this function gets called again with\nthe same collectionUrlParam, don't rerun this function because we'll return the same \nvalue as last time, which we've memoized so just return the selector that's been stored. */\n\nexport const selectCollection = memoize(collectionUrlParam => createSelector([selectCollections], collections => collections\n/*collections.find(\n    (collection) => collection.id === COLLECTION_ID_MAP[collectionUrlParam]\n  )*/\n));","map":{"version":3,"sources":["/Users/patry/react_projects/clothing-e-commerce/clothing-e-commerce/src/redux/shop/shop.selectors.js"],"names":["createSelector","memoize","COLLECTION_ID_MAP","hats","sneakers","jackets","womens","mens","selectShop","state","shop","selectCollections","collections","selectCollection","collectionUrlParam"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,OAAOC,OAAP,MAAoB,gBAApB,C,CAEA;;AACA,MAAMC,iBAAiB,GAAG;AACxBC,EAAAA,IAAI,EAAE,CADkB;AAExBC,EAAAA,QAAQ,EAAE,CAFc;AAGxBC,EAAAA,OAAO,EAAE,CAHe;AAIxBC,EAAAA,MAAM,EAAE,CAJgB;AAKxBC,EAAAA,IAAI,EAAE;AALkB,CAA1B;;AAQA,MAAMC,UAAU,GAAIC,KAAD,IAAWA,KAAK,CAACC,IAApC;;AAEA,OAAO,MAAMC,iBAAiB,GAAGX,cAAc,CAC7C,CAACQ,UAAD,CAD6C,EAE5CE,IAAD,IAAUA,IAAI,CAACE,WAF8B,CAAxC,C,CAKP;;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAGZ,OAAO,CAAEa,kBAAD,IACtCd,cAAc,CAAC,CAACW,iBAAD,CAAD,EAAuBC,WAAD,IAClCA;AACF;AACF;AACA;AAJgB,CADuB,CAAhC","sourcesContent":["import { createSelector } from \"reselect\";\nimport memoize from \"lodash.memoize\";\n\n//because the url parameter is a string and the id is a number, a map was created to match both\nconst COLLECTION_ID_MAP = {\n  hats: 1,\n  sneakers: 2,\n  jackets: 3,\n  womens: 4,\n  mens: 5,\n};\n\nconst selectShop = (state) => state.shop;\n\nexport const selectCollections = createSelector(\n  [selectShop],\n  (shop) => shop.collections\n);\n\n//find collection.id matching the url parameter from the collection_id_map\n/*By wrapping this function with memoize, we're saying that whenever this function \ngets called and receives collectionUrlParam, I want to memoize the return of this \nfunction (in this case we return a selector). If this function gets called again with\nthe same collectionUrlParam, don't rerun this function because we'll return the same \nvalue as last time, which we've memoized so just return the selector that's been stored. */\nexport const selectCollection = memoize((collectionUrlParam) =>\n  createSelector([selectCollections], (collections) =>\n    collections    \n  /*collections.find(\n      (collection) => collection.id === COLLECTION_ID_MAP[collectionUrlParam]\n    )*/\n  )\n);\n"]},"metadata":{},"sourceType":"module"}